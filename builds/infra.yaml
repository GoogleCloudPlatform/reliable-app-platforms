# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 14400s # 2hr
substitutions:
  _PROJECT_ID: ${PROJECT_ID}
  _KCC: "true"
  _STORAGE: "true"
  _FIREWALL_RULE: "true"
  _ACM_REPO: "true"
  _PROD: "true"
  _DEV: "true"
  _CONFIG: "true"
  _SPANNER: "true"
  _SQL: "true"
  _TEST_MULTICLUSTER_DEV: "false"
  _TEST_MULTICLUSTER_PROD: "false"
tags:
  - infra-main
steps:
  # 0 Build KCC
  # This step creates the Config Controller cluster.
  # This step creates the following resources:
  #   1. Enables required APIs.
  #   2. Creates the Config Controller cluster.
  #   3. Assigns Config Controller GCP SA roles/owner. Uses WI to create resources.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "00-infra-kcc-build"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_KCC}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-kcc-build.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 1 Config Config repo for KCC
  # This step creates the Config Controller ConfigSync repo and permissions.
  # This step creates the following resources:
  #   1. ConfigSync CSR repo named `infrastructure`.
  #   2. Creates an GCP SA named `config-sync-sa` to be used as a `reader` for the `infrastructure` CSR repo.
  #   3. Assigns `config-sync-sa` roles workloadIdentityUser and source.reader.
  #   4. Creates a RootSync resource in the Config Controller cluster for ConfigSync. Allows to sync Repo to Config Controller.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "01-infra-kcc-config-repo"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_KCC}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-kcc-config-repo.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 2 Build GCS storage bucket for project files, vars.sh etc
  # This step creates a GCS storage bucket in the project with the name of project ID.
  # The KCC files are in infra/storage folder.
  # This step creates the following resources:
  #   1. GCS storage bucket (with versioning enabled) named PROJECT_ID.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "02-infra-storage-bucket"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_STORAGE}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-storage-bucket.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 3 Build pod to pod all 10/8 firewall rule and GCLB IP addresses for whereami, shop and bank apps
  # This step creates a firewall rule for all 10/8 addresses to communicate internally on all ports.
  # The KCC files are in infra/network folder.
  # This step creates the following resources:
  #   1. VPC Firewall rule to allow all 10/8 on all ports. This is for multi-cluster Pod to Pod comms.
  #   2. Reserves a static global GCLB IP address for whereami app.
  #   3. Reserves a static global GCLB IP address for shop app.
  #   4. Reserves a static global GCLB IP address for bank app.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "03-infra-vpc-firewall-rule-and-gclb-ips"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_FIREWALL_RULE}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-vpc-firewall-rule-and-gclb-ips.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 4 Create Cloud Endpoints DNS names for whereami, shop and bank apps
  # This step creates the following resources:
  #   1. Cloud Endpoint name similar to "${DNS_PREFIX}.endpoints.${PROJECT_ID}.cloud.goog" for whereami app.
  #   2. Cloud Endpoint name similar to "${DNS_PREFIX}.endpoints.${PROJECT_ID}.cloud.goog" for shop app.
  #   3. Cloud Endpoint name similar to "${DNS_PREFIX}.endpoints.${PROJECT_ID}.cloud.goog" for bank app.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "04-infra-apps-cloud-endpoints-dns"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_FIREWALL_RULE}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-apps-cloud-endpoints-dns.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID} --async
  # 5 Build All repos
  # This step creates 5 CSR repos for applications and policies.
  # The KCC files are in infra/repos folder.
  # This step creates the following resources:
  #   1. ConfigSync CSR repo named `config`.
  #   2. Online Boutique CSR repo named `shop`.
  #   3. Bank of Anthos CSR repo named `bank`.
  #   4. Whereami CSR repo named `whereami`.
  #   5. Ops CSR repo named `ops`.
  #   6. Uses the GCP SA `config-sync-sa` to be used as a `reader` for the `config` CSR repo. Permission already assigned in step 02.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "05-infra-repo-all-build"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_ACM_REPO}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-repo-all-build.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 6 Build GKE clusters - dev
  # This step creates dev GKE clusters.
  # The KCC files are in infra/clusters/dev folder.
  # This step creates the following resources:
  #   1. 6 GKE zonal clusters using Config Controller. 3 GKE clusters in RegionA and 3 GKE clusters in RegionB.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "06-infra-gke-dev-build"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_DEV}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-gke-dev-build.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 7 Build GKE clusters - prod
  # This step creates prod GKE clusters.
  # The KCC files are in infra/clusters/prod folder.
  # This step creates the following resources:
  #   1. 6 GKE zonal clusters using Config Controller. 3 GKE clusters in RegionA and 3 GKE clusters in RegionB.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "07-infra-gke-prod-build"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_PROD}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-gke-prod-build.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 8 Build GKE clusters - config
  # This step creates config/admin GKE cluster.
  # The KCC files are in infra/clusters/config folder.
  # This step creates the following resources:
  #   1. 1 GKE zonal cluster using Config Controller. This is an admin cluster used for multi-cluster ingress.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "08-infra-gke-config-build"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_CONFIG}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-gke-config-build.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 9 Post GKE build nomos status
  # This step ensures that all GKE clusters are created using nomos status on the Config Controller cluster.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "09-infra-gke-build-nomos-status"
    entrypoint: bash
    args:
      - -c
      - |
        export SYNCED=0
        until [[ $$SYNCED -eq 1 ]]
        do
            export SYNCED=$(gcloud --project=${_PROJECT_ID} alpha anthos config sync repo list --targets config-controller --format='value(SYNCED)')
            sleep 5
            echo -e "SYNCED is $$SYNCED"
        done
  # 10 Confirm creation of GKE clusters - dev
  # This step ensures that the dev GKE clusters are in Ready state.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "10-infra-gke-dev-confirm-build"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_DEV}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-gke-dev-confirm.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 11 Confirm creation of GKE clusters - prod
  # This step ensures that the prod GKE clusters are in Ready state.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "11-infra-gke-prod-confirm-build"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_PROD}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-gke-prod-confirm.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 12 Confirm creation of GKE clusters - config
  # This step ensures that the config/mci GKE cluster is in Ready state.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "12-infra-gke-config-confirm-build"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_CONFIG}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-gke-config-confirm.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 13 Register GKE clusters to Fleet - dev
  # This step registers dev GKE clusters to Fleet using gcloud command (with workload identity).
  - name: "gcr.io/cloud-builders/gcloud"
    id: "13-infra-gke-dev-fleet-reg"
    entrypoint: bash
    waitFor: ["10-infra-gke-dev-confirm-build"]
    args:
      - -c
      - |
        [[ "${_DEV}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-gke-dev-fleet-reg.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID} --async
  # 14 Register GKE clusters to Fleet - prod
  # This step registers prod GKE clusters to Fleet using gcloud command (with workload identity).
  - name: "gcr.io/cloud-builders/gcloud"
    id: "14-infra-gke-prod-fleet-reg"
    entrypoint: bash
    waitFor: ["11-infra-gke-prod-confirm-build"]
    args:
      - -c
      - |
        [[ "${_PROD}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-gke-prod-fleet-reg.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID} --async
  # 15 Register GKE clusters to Fleet - config
  # This step registers config/mci GKE cluster to Fleet using gcloud command (with workload identity).
  - name: "gcr.io/cloud-builders/gcloud"
    id: "15-infra-gke-config-fleet-reg"
    entrypoint: bash
    waitFor: ["12-infra-gke-config-confirm-build"]
    args:
      - -c
      - |
        [[ "${_CONFIG}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-gke-config-fleet-reg.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID} --async
  # 16 Enable Fleet features - ACM and MCS
  # This step enables the multi-cluster services (MCS) and the mesh (ASM) Fleet features using gcloud.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "16-infra-features-fleet-acm-mcs"
    entrypoint: bash
    args:
      - -c
      - exec gcloud builds submit --config builds/infra-features-fleet-acm-mcs.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 17 Enable Multi-cluster Ingress (MCI) on GKE config
  # This step creates multi-cluster Gateway API CRDs on the config GKE cluster.
  # This step creates the following resources:
  #   1. Enables the Fleet ingress feature on the project. NOTE: This must be done AFTER installing the Gateway API CRDs in the previous step.
  #   2. Assign container.admin and ServiceUsageConsumer roles on the SA multiclusteringress importer GCP SA.
  #   2. This results in four GatewayClasses: gke-l7-gxlb, gke-l7-gxlb-mc and gke-l7-rilb, gke-l7-rilb-mc
  - name: "gcr.io/cloud-builders/gcloud"
    id: "17-infra-features-gke-config-mci"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_CONFIG}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-config-mci.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 18 Confirm MCS is enabled on GKE - dev
  # This step ensures that the multi-cluster services (MCS) feature is enabled on the dev GKE clusters.
  # This is required for multi-cluster ingress.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "18-infra-features-gke-dev-mcs"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_DEV}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-dev-mcs.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 19 Confirm MCS is enabled on GKE - prod
  # This step ensures that the multi-cluster services (MCS) feature is enabled on the prod GKE clusters.
  # This is required for multi-cluster ingress.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "19-infra-features-gke-prod-mcs"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_PROD}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-prod-mcs.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 20 Confirm MCS is enabled on GKE - config
  # This step ensures that the multi-cluster services (MCS) feature is enabled on the config/mci GKE cluster.
  # This is required for multi-cluster ingress.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "20-infra-features-gke-config-mcs"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_CONFIG}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-config-mcs.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 21 Create Gateway APIs on GKE config
  # This step creates Gateway API CRDs on the config GKE cluster.
  # This step creates the following resources:
  #   1. Network viewer rols on the gke-mcs-importer GCP SA.
  #   2. Gateway API CRDs on the config GKE cluster. This results in two GatewayClasses: gke-l7-gxlb and gke-l7-rilb
  - name: "gcr.io/cloud-builders/gcloud"
    id: "21-infra-features-gke-config-gateway-apis"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_CONFIG}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-config-gateway-apis.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 22 Install ACM on GKE - dev
  # This step install ACM ConfigSync and Policy Controller on dev GKE clusters.
  # This step creates the following resources:
  #   1. Config management operator.
  #   2. ConfigManagement resource. Configures ConfigSync and PoCo (aka Policy Controller)
  #   2. RootSync resource. Configures ConfigSync repo and creds.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "22-infra-features-gke-dev-acm"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_DEV}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-dev-acm.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 23 Install ACM on GKE - prod
  # This step install ACM ConfigSync and Policy Controller on prod GKE clusters.
  # This step creates the following resources:
  #   1. Config management operator.
  #   2. ConfigManagement resource. Configures ConfigSync and PoCo (aka Policy Controller)
  #   2. RootSync resource. Configures ConfigSync repo and creds.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "23-infra-features-gke-prod-acm"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_PROD}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-prod-acm.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 24 Enable Fleet features - Mesh
  # This step enables mesh feature in the project using gcloud. This results in mesh CRDs (e.g. ControlPlaneRevision etc.) in the Fleet registered clusters.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "24-infra-features-fleet-mesh"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_PROD}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-fleet-mesh.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 25 Install Mesh on GKE - dev
  # This step installs ASM with Fleet API on the dev GKE clusters using gcloud.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "25-infra-features-gke-dev-mesh"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_DEV}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-dev-mesh.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 26 Install Mesh on GKE - prod
  # This step installs ASM with Fleet API on the prod GKE clusters using gcloud.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "26-infra-features-gke-prod-mesh"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_PROD}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-prod-mesh.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 27 Confirm Mesh on GKE - dev
  # This step confirms that ASM managed control plane (MCP) is successfully Provisioned on dev GKE clusters.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "27-infra-features-gke-dev-mesh-confirm"
    entrypoint: bash
    waitFor: ["25-infra-features-gke-dev-mesh"]
    args:
      - -c
      - |
        [[ "${_DEV}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-dev-mesh-confirm.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 28 Confirm Mesh on GKE - prod
  # This step confirms that ASM managed control plane (MCP) is successfully Provisioned on prod GKE clusters.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "28-infra-features-gke-prod-mesh-confirm"
    entrypoint: bash
    waitFor: ["26-infra-features-gke-prod-mesh"]
    args:
      - -c
      - |
        [[ "${_PROD}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-prod-mesh-confirm.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 29 Configure Mesh (multicluster and telemetry) on GKE - dev
  # This step configures multicluster service discovery and access logging/tracing on the dev GKE clusters.
  # This step creates the following resources:
  #   1. Patches the existing asm-options configmap with multicluster_mode: connected.
  #   2. Updates the istio-asm-managed configmap with access logging and tracing to stackdriver
  - name: "gcr.io/cloud-builders/gcloud"
    id: "29-infra-features-gke-dev-mesh-config"
    entrypoint: bash
    waitFor: ["27-infra-features-gke-dev-mesh-confirm"]
    args:
      - -c
      - |
        [[ "${_DEV}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-dev-mesh-config.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 30 Configure Mesh (multicluster and telemetry) on GKE - prod
  # This step configures multicluster service discovery and access logging/tracing on the prod GKE clusters.
  # This step creates the following resources:
  #   1. Patches the existing asm-options configmap with multicluster_mode: connected.
  #   2. Updates the istio-asm-managed configmap with access logging and tracing to stackdriver
  - name: "gcr.io/cloud-builders/gcloud"
    id: "30-infra-features-gke-prod-mesh-config"
    entrypoint: bash
    waitFor: ["28-infra-features-gke-prod-mesh-confirm"]
    args:
      - -c
      - |
        [[ "${_PROD}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-prod-mesh-config.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 31 Configure Mesh Gateways via ACM ConfigSync
  # This step deploys ASM ingress, egress and eastwest gateways on all apps (dev, stage and prod but not config) clusters.
  # This step creates the following resources:
  #   1. Ingress gateway Deployment, Service and ServiceExport.
  #   2. Egress gateway Deployment, Service and ServiceExport.
  #   3. Eastwest gateway Deployment, Service and ServiceExport.
  #   4. Required Role and RoleBinding for the KSA for all the gateways.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "31-infra-features-gke-mesh-gateways"
    entrypoint: bash
    args:
      - -c
      - |
        exec gcloud builds submit --config builds/infra-features-gke-mesh-gateways.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 32 Confirm Mesh gateways on GKE - dev
  # This step confirms that the ASM ingress, egress and eastwest gateways are up and running on the dev GKE clusters.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "32-infra-features-gke-mesh-gateways-dev"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_DEV}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-mesh-gateways-dev.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 33 Confirm Mesh gateways on GKE - prod
  # This step confirms that the ASM ingress, egress and eastwest gateways are up and running on the prod GKE clusters.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "33-infra-features-gke-mesh-gateways-prod"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_PROD}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-features-gke-mesh-gateways-prod.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 34 Install clusterselectros, mesh policy bundles and test application to verify mesh - Whereami
  # This step deploys a sample/test application called `whereami` on all apps (dev, stage and prod but not config) clusters.
  # This step creates the following resources:
  #   1. Namespace called `whereami-dev`, `whereami-stage` and `whereami-prod` for the respective clusters.
  #   2. `whereami-frontend-dev` and `whereami-backend-dev` in the `whereami-dev` namespace in the dev GKE clusters.
  #   4. `whereami-frontend-prod` and `whereami-backend-prod` in the `whereami-prod` namespace in the prod GKE clusters.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "34-infra-app-whereami-acm"
    entrypoint: bash
    args:
      - -c
      - |
        exec gcloud builds submit --config builds/infra-acm-selectors-policies-whereami-test-app.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 35 Install Cloud Deploy Targets i.e. all non prod and prod clusters
  # This step deploys Target resources for all application clusters.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "35-infra-app-deploy-targets"
    entrypoint: bash
    args:
      - -c
      - |
        exec gcloud builds submit --config builds/infra-app-deploy-targets.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 36 Install whereami app Cloud Deploy pipelines
  # This step deploys DeliveryPipeline resources for whereami-frontend and whereami-backend.
  # The following resources are created:
  #   1. DeliveryPipeline named whereami-frontend-g-pipeline
  #   2. DeliveryPipeline named whereami-backend-g-pipeline
  - name: "gcr.io/cloud-builders/gcloud"
    id: "36-infra-app-whereami-deploy-pipeline"
    waitFor: ["35-infra-app-deploy-targets"]
    entrypoint: bash
    args:
      - -c
      - |
        exec gcloud builds submit --config builds/infra-app-whereami-deploy-pipeline.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 37 Install shop app Cloud Deploy pipelines
  # This step deploys DeliveryPipeline resources for shop ap.
  # The following resources are created:
  #   1. DeliveryPipeline named shop-ad-g-pipeline
  #   2. DeliveryPipeline named shop-cart-g-pipeline
  #   3. DeliveryPipeline named shop-checkout-g-pipeline
  #   4. DeliveryPipeline named shop-currency-g-pipeline
  #   5. DeliveryPipeline named shop-email-g-pipeline
  #   6. DeliveryPipeline named shop-frontend-g-pipeline
  #   7. DeliveryPipeline named shop-loadgenerator-g-pipeline
  #   8. DeliveryPipeline named shop-payment-g-pipeline
  #   9. DeliveryPipeline named shop-productcatalog-g-pipeline
  #   10. DeliveryPipeline named shop-recommendation-g-pipeline
  #   11. DeliveryPipeline named shop-redis-g-pipeline
  #   12. DeliveryPipeline named shop-shipping-g-pipeline
  - name: "gcr.io/cloud-builders/gcloud"
    id: "37-infra-app-shop-deploy-pipeline"
    waitFor: ["35-infra-app-deploy-targets"]
    entrypoint: bash
    args:
      - -c
      - |
        exec gcloud builds submit --config builds/infra-app-shop-deploy-pipeline.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 38 Install bank app Cloud Deploy pipelines
  # This step deploys DeliveryPipeline resources for bank ap.
  # The following resources are created:
  #   1. DeliveryPipeline named bank-accounts-db-g-pipeline
  #   2. DeliveryPipeline named bank-balancereader-g-pipeline
  #   3. DeliveryPipeline named bank-contacts-g-pipeline
  #   4. DeliveryPipeline named bank-frontend-g-pipeline
  #   5. DeliveryPipeline named bank-ledger-db-g-pipeline
  #   6. DeliveryPipeline named bank-ledgerwriter-g-pipeline
  #   7. DeliveryPipeline named bank-loadgenerator-g-pipeline
  #   8. DeliveryPipeline named bank-transactionhistory-g-pipeline
  #   9. DeliveryPipeline named bank-user-g-pipeline
  - name: "gcr.io/cloud-builders/gcloud"
    id: "38-infra-app-bank-deploy-pipeline"
    waitFor: ["35-infra-app-deploy-targets"]
    entrypoint: bash
    args:
      - -c
      - |
        exec gcloud builds submit --config builds/infra-app-bank-deploy-pipeline.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 39 Verify whereami on GKE Dev
  # This step confirms that the `whereami` app (both frontend and backend) is running on the dev GKE clusters.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "39-infra-app-whereami-dev"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_DEV}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-app-whereami-dev.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 40 Verify whereami on GKE Prod
  # This step confirms that the `whereami` app (both frontend and backend) is running on the prod GKE clusters.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "40-infra-app-whereami-prod"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_PROD}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-app-whereami-prod.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 41 Verify multicluster connectivity on GKE Dev
  # This step uses a shell script and the `whereami` sample to test connectivity between all dev GKE clusters.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "41-infra-app-whereami-multicluster-dev"
    entrypoint: bash
    waitFor: ["39-infra-app-whereami-dev"]
    args:
      - -c
      - |
        [[ "${_TEST_MULTICLUSTER_DEV}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-app-whereami-multicluster-dev.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 42 Verify multicluster connectivity on GKE Prod
  # This step uses a shell script and the `whereami` sample to test connectivity between all prod GKE clusters.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "42-infra-app-whereami-multicluster-prod"
    entrypoint: bash
    waitFor: ["40-infra-app-whereami-prod"]
    args:
      - -c
      - |
        [[ "${_TEST_MULTICLUSTER_PROD}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-app-whereami-multicluster-prod.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 43 Create Spanner instance
  # The KCC file in the infra/databases folder.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "43-infra-db-spanner-instance-build"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_SPANNER}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-db-spanner-instance-build.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 44 Configure read/write IAM permissions for Spanner from cart
  # The following resources are creates:
  #   1.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "44-infra-db-spanner-instance-iam"
    waitFor: ["43-infra-db-spanner-instance-build"]
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_SPANNER}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-db-spanner-instance-iam.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
  # 45 Create CloudSQL instance
  # The KCC file in the infra/databases folder.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "45-infra-db-cloudsql-instance-build"
    entrypoint: bash
    args:
      - -c
      - |
        [[ "${_SQL}" == "false" ]] && exit 0
        exec gcloud builds submit --config builds/infra-db-cloudsql-instance-build.yaml --substitutions=_PROJECT_ID=${_PROJECT_ID}
