# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 7200s # 2hr
tags:
  - infra-gke-dev-fleet-reg
substitutions:
  _PROJECT_ID: ${PROJECT_ID}
steps:
# Register GKE dev clusters to Fleet
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-gke-dev1-fleet-reg"
  dir: "infra"
  entrypoint: bash
  waitFor: ['-']
  args:
    - -c
    - |
      source vars.sh
      export DEV1_REGISTERED=$(gcloud --project=${_PROJECT_ID} container fleet memberships list --filter="name:$${GKE_DEV1_NAME}")
      echo -e "DEV1_REGISTERED is $$DEV1_REGISTERED"
      if [[ ! $${DEV1_REGISTERED} ]]; then
        while [[ $(gcloud container clusters describe $${GKE_DEV1_NAME} --zone $${GKE_DEV1_LOCATION} --project ${_PROJECT_ID} --format="value(status)") != "RUNNING" ]]; do
          echo "Waiting for $${GKE_DEV1_NAME} cluster to be RUNNING."
          sleep 5
        done
        gcloud container fleet memberships register $${GKE_DEV1_NAME} \
          --gke-cluster $${GKE_DEV1_LOCATION}/$${GKE_DEV1_NAME} \
          --enable-workload-identity \
          --project=${_PROJECT_ID}
      fi
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-gke-dev2-fleet-reg"
  dir: "infra"
  entrypoint: bash
  waitFor: ['-']
  args:
    - -c
    - |
      source vars.sh
      export DEV2_REGISTERED=$(gcloud --project=${_PROJECT_ID} container fleet memberships list --filter="name:$${GKE_DEV2_NAME}")
      echo -e "DEV2_REGISTERED is $$DEV2_REGISTERED"
      if [[ ! $${DEV2_REGISTERED} ]]; then
        while [[ $(gcloud container clusters describe $${GKE_DEV2_NAME} --zone $${GKE_DEV2_LOCATION} --project ${_PROJECT_ID} --format="value(status)") != "RUNNING" ]]; do
          echo "Waiting for $${GKE_DEV2_NAME} cluster to be RUNNING."
          sleep 5
        done
        gcloud container fleet memberships register $${GKE_DEV2_NAME} \
          --gke-cluster $${GKE_DEV2_LOCATION}/$${GKE_DEV2_NAME} \
          --enable-workload-identity \
          --project=${_PROJECT_ID}
      fi
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-gke-dev3-fleet-reg"
  dir: "infra"
  entrypoint: bash
  waitFor: ['-']
  args:
    - -c
    - |
      source vars.sh
      export DEV3_REGISTERED=$(gcloud --project=${_PROJECT_ID} container fleet memberships list --filter="name:$${GKE_DEV3_NAME}")
      echo -e "DEV3_REGISTERED is $$DEV3_REGISTERED"
      if [[ ! $${DEV3_REGISTERED} ]]; then
        while [[ $(gcloud container clusters describe $${GKE_DEV3_NAME} --zone $${GKE_DEV3_LOCATION} --project ${_PROJECT_ID} --format="value(status)") != "RUNNING" ]]; do
          echo "Waiting for $${GKE_DEV3_NAME} cluster to be RUNNING."
          sleep 5
        done
        gcloud container fleet memberships register $${GKE_DEV3_NAME} \
          --gke-cluster $${GKE_DEV3_LOCATION}/$${GKE_DEV3_NAME} \
          --enable-workload-identity \
          --project=${_PROJECT_ID}
      fi
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-gke-dev4-fleet-reg"
  dir: "infra"
  entrypoint: bash
  waitFor: ['-']
  args:
    - -c
    - |
      source vars.sh
      export DEV4_REGISTERED=$(gcloud --project=${_PROJECT_ID} container fleet memberships list --filter="name:$${GKE_DEV4_NAME}")
      echo -e "DEV4_REGISTERED is $$DEV4_REGISTERED"
      if [[ ! $${DEV4_REGISTERED} ]]; then
        while [[ $(gcloud container clusters describe $${GKE_DEV4_NAME} --zone $${GKE_DEV4_LOCATION} --project ${_PROJECT_ID} --format="value(status)") != "RUNNING" ]]; do
          echo "Waiting for $${GKE_DEV4_NAME} cluster to be RUNNING."
          sleep 5
        done
        gcloud container fleet memberships register $${GKE_DEV4_NAME} \
          --gke-cluster $${GKE_DEV4_LOCATION}/$${GKE_DEV4_NAME} \
          --enable-workload-identity \
          --project=${_PROJECT_ID}
      fi
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-gke-dev5-fleet-reg"
  dir: "infra"
  entrypoint: bash
  waitFor: ['-']
  args:
    - -c
    - |
      source vars.sh
      export DEV5_REGISTERED=$(gcloud --project=${_PROJECT_ID} container fleet memberships list --filter="name:$${GKE_DEV5_NAME}")
      echo -e "DEV5_REGISTERED is $$DEV5_REGISTERED"
      if [[ ! $${DEV5_REGISTERED} ]]; then
        while [[ $(gcloud container clusters describe $${GKE_DEV5_NAME} --zone $${GKE_DEV5_LOCATION} --project ${_PROJECT_ID} --format="value(status)") != "RUNNING" ]]; do
          echo "Waiting for $${GKE_DEV5_NAME} cluster to be RUNNING."
          sleep 5
        done
        gcloud container fleet memberships register $${GKE_DEV5_NAME} \
          --gke-cluster $${GKE_DEV5_LOCATION}/$${GKE_DEV5_NAME} \
          --enable-workload-identity \
          --project=${_PROJECT_ID}
      fi
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-gke-dev6-fleet-reg"
  dir: "infra"
  entrypoint: bash
  waitFor: ['-']
  args:
    - -c
    - |
      source vars.sh
      export DEV6_REGISTERED=$(gcloud --project=${_PROJECT_ID} container fleet memberships list --filter="name:$${GKE_DEV6_NAME}")
      echo -e "DEV6_REGISTERED is $$DEV6_REGISTERED"
      if [[ ! $${DEV6_REGISTERED} ]]; then
        while [[ $(gcloud container clusters describe $${GKE_DEV6_NAME} --zone $${GKE_DEV6_LOCATION} --project ${_PROJECT_ID} --format="value(status)") != "RUNNING" ]]; do
          echo "Waiting for $${GKE_DEV6_NAME} cluster to be RUNNING."
          sleep 5
        done
        gcloud container fleet memberships register $${GKE_DEV6_NAME} \
          --gke-cluster $${GKE_DEV6_LOCATION}/$${GKE_DEV6_NAME} \
          --enable-workload-identity \
          --project=${_PROJECT_ID}
      fi
