# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# NOTE: currently requires SCM triggering due to dependency on the COMMIT_SHA variable

timeout: 7200s # 2hr
tags:
  - ops-asm-ingress-mci
substitutions:
  _PROJECT_ID: ${PROJECT_ID}
steps:
# Create Google managed certs
- name: gcr.io/cloud-builders/gcloud
  id: '00-google-managed-cert-apps'
  entrypoint: bash
  dir: "asm"
  args: 
    - -c
    - |
      gsutil cp -r gs://${_PROJECT_ID}/vars.sh infra-vars.sh
      cat infra-vars.sh
      source infra-vars.sh
      cat <<EOF > shop-managed-certs.yaml
      apiVersion: networking.gke.io/v1beta2
      kind: ManagedCertificate
      metadata:
        name: shop-managed-cert
      spec:
        domains:
        - "$${SHOP_APP_NAME}.endpoints.${_PROJECT_ID}.cloud.goog"
      EOF
      cat <<EOF > bank-managed-certs.yaml
      apiVersion: networking.gke.io/v1beta2
      kind: ManagedCertificate
      metadata:
        name: bank-managed-cert
      spec:
        domains:
        - "$${BANK_APP_NAME}.endpoints.${_PROJECT_ID}.cloud.goog"
      EOF
      cat <<EOF > whereami-managed-certs.yaml
      apiVersion: networking.gke.io/v1beta2
      kind: ManagedCertificate
      metadata:
        name: whereami-managed-cert
      spec:
        domains:
        - "$${WHEREAMI_APP_NAME}.endpoints.${_PROJECT_ID}.cloud.goog"
      EOF
      gcloud container clusters get-credentials $${GKE_CONFIG_NAME} --zone $${GKE_CONFIG_LOCATION} --project ${_PROJECT_ID}
      kubectl apply -f shop-managed-certs.yaml
      kubectl apply -f bank-managed-certs.yaml
      kubectl apply -f whereami-managed-certs.yaml
# Configure TLS certs for GCLB to ASM Ingress
- name: gcr.io/cloud-builders/gcloud
  id: '01-configure-mci-tls-certs'
  entrypoint: bash
  dir: "asm"
  args: 
    - -c
    - |
      gsutil cp -r gs://${_PROJECT_ID}/vars.sh infra-vars.sh
      cat infra-vars.sh
      source infra-vars.sh
      export CERTS_EXIST=$(gsutil ls gs://${_PROJECT_ID} | grep frontend)
      if [[ ! "$${CERTS_EXIST}" ]]; then
        echo -e "Creating openssl certs..."
        openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \
        -subj "/CN=frontend.endpoints.${_PROJECT_ID}.cloud.goog/O=Edge2Mesh Inc" \
        -keyout frontend.endpoints.${_PROJECT_ID}.cloud.goog.key \
        -out frontend.endpoints.${_PROJECT_ID}.cloud.goog.crt
        gsutil cp -r frontend.endpoints.${_PROJECT_ID}.cloud.goog.key gs://${_PROJECT_ID}/frontend.endpoints.${_PROJECT_ID}.cloud.goog.key
        gsutil cp -r frontend.endpoints.${_PROJECT_ID}.cloud.goog.crt gs://${_PROJECT_ID}/frontend.endpoints.${_PROJECT_ID}.cloud.goog.crt
        gsutil ls gs://${_PROJECT_ID}
      else
        echo -e "Certs exist."
      fi
      gsutil cp -r gs://${_PROJECT_ID}/frontend.endpoints.${_PROJECT_ID}.cloud.goog.key frontend.endpoints.${_PROJECT_ID}.cloud.goog.key
      gsutil cp -r gs://${_PROJECT_ID}/frontend.endpoints.${_PROJECT_ID}.cloud.goog.crt frontend.endpoints.${_PROJECT_ID}.cloud.goog.crt
      kubectl -n asm-gateways create secret tls edge2mesh-credential \
      --key=frontend.endpoints.${PROJECT_ID}.cloud.goog.key \
      --cert=frontend.endpoints.${PROJECT_ID}.cloud.goog.crt --dry-run=client -oyaml > gclb-certs.yaml
      git config --global user.email "cloudbuild-ci@cloudbuild.gserviceaccount.com"
      git config --global user.name "cloudbuild-ci"
      gcloud source repos clone config --project=${_PROJECT_ID}
      mkdir -p config/gclb
      cp -r gclb-certs.yaml config/gclb
      cd config
      git add . && git commit -am "Deploy GCLB to ASM ingress gateway certs secret"
      git push
# Configure multicluster ingress for prod
- name: gcr.io/cloud-builders/gcloud
  id: '03-configure-mci-prod'
  entrypoint: bash
  dir: "asm"
  args: 
    - -c
    - |
      gsutil cp -r gs://${_PROJECT_ID}/vars.sh infra-vars.sh
      cat infra-vars.sh
      source infra-vars.sh
      gcloud anthos config controller get-credentials config-controller --location=$${KCC_REGION} --project=${_PROJECT_ID}
      gcloud container clusters get-credentials $${GKE_CONFIG_NAME} --zone $${GKE_CONFIG_LOCATION} --project ${_PROJECT_ID}
      export SHOP_MANAGED_CERT=$(kubectl get managedcertificate shop-managed-cert -ojsonpath='{.status.certificateName}')
      until [[ "$${SHOP_MANAGED_CERT}" ]]; do
        sleep 3
        export SHOP_MANAGED_CERT=$(kubectl get managedcertificate shop-managed-cert -ojsonpath='{.status.certificateName}')
      done
      export BANK_MANAGED_CERT=$(kubectl get managedcertificate bank-managed-cert -ojsonpath='{.status.certificateName}')
      until [[ "$${BANK_MANAGED_CERT}" ]]; do
        sleep 3
        export BANK_MANAGED_CERT=$(kubectl get managedcertificate bank-managed-cert -ojsonpath='{.status.certificateName}')
      done
      export WHEREAMI_MANAGED_CERT=$(kubectl get managedcertificate whereami-managed-cert -ojsonpath='{.status.certificateName}')
      until [[ "$${WHEREAMI_MANAGED_CERT}" ]]; do
        sleep 3
        export WHEREAMI_MANAGED_CERT=$(kubectl get managedcertificate whereami-managed-cert -ojsonpath='{.status.certificateName}')
      done
      cat <<EOF > namespace-asm-gateways.yaml
      apiVersion: v1
      kind: Namespace
      metadata:
        name: asm-gateways
      EOF
      cat <<EOF > asm-ingressgateway-mci.yaml
      apiVersion: networking.gke.io/v1
      kind: MultiClusterIngress
      metadata:
        name: asm-ingressgateway-mci
        namespace: asm-gateways
        annotations:
          networking.gke.io/static-ip: "$${PROD_MCI_GCLB_IP}"
          networking.gke.io/pre-shared-certs: "$${SHOP_MANAGED_CERT},$${BANK_MANAGED_CERT},$${WHEREAMI_MANAGED_CERT}"
      spec:
        template:
          spec:
            backend:
              serviceName: asm-ingressgateway-mcs
              servicePort: 443
      EOF
      cat <<EOF > asm-ingressgateway-mcs.yaml
      apiVersion: networking.gke.io/v1
      kind: MultiClusterService
      metadata:
        name: asm-ingressgateway-mcs
        namespace: asm-gateways
        annotations:
          beta.cloud.google.com/backend-config: '{"ports": {"443":"asm-ingress-mci-config"}}'
          networking.gke.io/app-protocols: '{"http2":"HTTP2"}'
      spec:
        template:
          spec:
            selector:
              asm: ingressgateway
            ports:
            - name: http2
              protocol: TCP
              port: 443 # Port the Service listens on
        clusters:
        - link: "$${GKE_PROD1_LOCATION}/$${GKE_PROD1_NAME}"
        - link: "$${GKE_PROD2_LOCATION}/$${GKE_PROD2_NAME}"
        - link: "$${GKE_PROD3_LOCATION}/$${GKE_PROD3_NAME}"
        - link: "$${GKE_PROD4_LOCATION}/$${GKE_PROD4_NAME}"
        - link: "$${GKE_PROD5_LOCATION}/$${GKE_PROD5_NAME}"
        - link: "$${GKE_PROD6_LOCATION}/$${GKE_PROD6_NAME}"
      EOF
      cat <<EOF > asm-ingress-mci-config.yaml
      apiVersion: cloud.google.com/v1
      kind: BackendConfig
      metadata:
        name: asm-ingress-mci-config
        namespace: asm-gateways
      spec:
        healthCheck:
          type: HTTP
          port: 15021
          requestPath: /healthz/ready
      EOF
      kubectl apply -f namespace-asm-gateways.yaml
      kubectl apply -f asm-ingress-mci-config.yaml
      kubectl apply -f asm-ingressgateway-mcs.yaml
      kubectl apply -f asm-ingressgateway-mci.yaml
- name: gcr.io/cloud-builders/gcloud
  id: '05-configure-asm-gateway-prod'
  entrypoint: bash
  dir: "asm"
  args: 
    - -c
    - |
      cat <<EOF > asm-ingress-gateway.yaml
      apiVersion: networking.istio.io/v1beta1
      kind: Gateway
      metadata:
        name: asm-ingress-gateway
        namespace: asm-gateways
      spec:
        selector:
          asm: ingressgateway # use ASM external ingress gateway
        servers:
        - port:
            number: 443
            name: https
            protocol: HTTPS
          hosts:
          - '*' # IMPORTANT: Must use wildcard here when using SSL, see note below
          tls:
            mode: SIMPLE
            credentialName: edge2mesh-credential
      EOF
      git config --global user.email "cloudbuild-ci@cloudbuild.gserviceaccount.com"
      git config --global user.name "cloudbuild-ci"
      gcloud source repos clone config --project=${_PROJECT_ID}
      mkdir -p config/asm
      cp -r asm-ingress-gateway.yaml config/asm
      cd config
      git add . && git commit -am "Deploy ASM Gateway prod"
      git push
