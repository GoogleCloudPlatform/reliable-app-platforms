# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# NOTE: currently requires SCM triggering due to dependency on the COMMIT_SHA variable

timeout: 7200s # 2hr
tags:
  - app-cicd-bank-ledgerwriter-g
substitutions:
  _PROJECT_ID: ${_PROJECT_ID}
  _PIPELINE_LOCATION: ${_PIPELINE_LOCATION}
  _COMMIT_SHA: ${_COMMIT_SHA}
  _SHORT_SHA: ${_SHORT_SHA}
  _BUILD: "true"
  _DEPLOY_G: "true"
  _ARTIFACT_REGISTRY: "bank"
  _SERVICE: "ledgerwriter"
  _AUTO_APPROVE_TO_PROD: "true"
steps:
# Build and tag using commit sha
- name: maven:latest
  id: "00-docker-build"
  entrypoint: "bash"
  dir: src
  args:
    - -c
    - |
      [[ "${_BUILD}" == "false" ]] && exit 0
      echo -e "_COMMIT_SHA is ${_COMMIT_SHA}"
      echo -e "_SHORT_SHA is ${_SHORT_SHA}"
      echo -e "_PIPELINE_LOCATION is ${_PIPELINE_LOCATION}"
      mvn -e compile com.google.cloud.tools:jib-maven-plugin:3.3.0:build -Dimage=${_PIPELINE_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY}/${_SERVICE}:${_COMMIT_SHA}
# # Build and tag using commit sha
# - name: 'gcr.io/cloud-builders/docker'
#   id: '00-docker-build'
#   entrypoint: bash
#   dir: src
#   args: 
#     - -c
#     - |
#       [[ "${_BUILD}" == "false" ]] && exit 0
#       echo -e "_COMMIT_SHA is ${_COMMIT_SHA}"
#       echo -e "_SHORT_SHA is ${_SHORT_SHA}"
#       echo -e "_PIPELINE_LOCATION is ${_PIPELINE_LOCATION}"
#       docker build . -t ${_PIPELINE_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY}/${_SERVICE}:${_COMMIT_SHA} -f Dockerfile
# # Push the container image to Artifact Registry
# - name: 'gcr.io/cloud-builders/docker'
#   id: '01-docker-push'
#   entrypoint: bash
#   args:
#     - -c 
#     - |
#       [[ "${_BUILD}" == "false" ]] && exit 0
#       docker push ${_PIPELINE_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY}/${_SERVICE}:${_COMMIT_SHA}
# Create release in Google Cloud Deploy
- name: gcr.io/cloud-builders/gcloud
  id: '02-deploy-g-d1a'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      [[ "${_BUILD}" == "true" ]] && export IMAGE=${_PIPELINE_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY}/${_SERVICE}:${_COMMIT_SHA}
      [[ "${_BUILD}" == "false" ]] && export IMAGE=${_PIPELINE_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY}/${_SERVICE}
      echo -e "IMAGE is set to $${IMAGE}"
      gcloud deploy releases create rel-${_SHORT_SHA} \
      --delivery-pipeline ${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline \
      --region ${_PIPELINE_LOCATION} \
      --annotations commitId=${REVISION_ID} \
      --images ${_SERVICE}=$${IMAGE}
# Auto promote to d1b
- name: gcr.io/cloud-builders/gcloud
  id: '03-deploy-g-promote-d1b'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      until [[ $(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}") ]]; do
        sleep 3
      done
      export RELEASE_NAME=$(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}")
      until [[ $(gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --filter="name~${_SHORT_SHA}" --format='value(state)' | wc -l) == 1 ]]; do
        echo -e "Stage states..."
        gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='table(name,state)'
        sleep 5
      done
      gcloud --project=${_PROJECT_ID} deploy releases promote --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --to-target=d1b
# Auto promote to d1c
- name: gcr.io/cloud-builders/gcloud
  id: '04-deploy-g-promote-d1c'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      until [[ $(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}") ]]; do
        sleep 3
      done
      export RELEASE_NAME=$(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}")
      until [[ $(gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --filter="name~${_SHORT_SHA}" --format='value(state)' | wc -l) == 2 ]]; do
        echo -e "Stage states..."
        gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='table(name,state)'
        sleep 5
      done
      gcloud --project=${_PROJECT_ID} deploy releases promote --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --to-target=d1c
# Auto promote to d2a
- name: gcr.io/cloud-builders/gcloud
  id: '05-deploy-g-promote-d2a'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      until [[ $(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}") ]]; do
        sleep 3
      done
      export RELEASE_NAME=$(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}")
      until [[ $(gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --filter="name~${_SHORT_SHA}" --format='value(state)' | wc -l) == 3 ]]; do
        echo -e "Stage states..."
        gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='table(name,state)'
        sleep 5
      done
      gcloud --project=${_PROJECT_ID} deploy releases promote --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --to-target=d2a
# Auto promote to d2b
- name: gcr.io/cloud-builders/gcloud
  id: '06-deploy-g-promote-d2b'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      until [[ $(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}") ]]; do
        sleep 3
      done
      export RELEASE_NAME=$(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}")
      until [[ $(gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --filter="name~${_SHORT_SHA}" --format='value(state)' | wc -l) == 4 ]]; do
        echo -e "Stage states..."
        gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='table(name,state)'
        sleep 5
      done
      gcloud --project=${_PROJECT_ID} deploy releases promote --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --to-target=d2b
# Auto promote to d2c
- name: gcr.io/cloud-builders/gcloud
  id: '07-deploy-g-promote-d2c'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      until [[ $(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}") ]]; do
        sleep 3
      done
      export RELEASE_NAME=$(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}")
      until [[ $(gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --filter="name~${_SHORT_SHA}" --format='value(state)' | wc -l) == 5 ]]; do
        echo -e "Stage states..."
        gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='table(name,state)'
        sleep 5
      done
      gcloud --project=${_PROJECT_ID} deploy releases promote --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --to-target=d2c
# Auto promote to p1a
- name: gcr.io/cloud-builders/gcloud
  id: '08-deploy-g-promote-p1a'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      [[ "${_AUTO_APPROVE_TO_PROD}" == "false" ]] && exit 0
      until [[ $(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}") ]]; do
        sleep 3
      done
      export RELEASE_NAME=$(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}")
      until [[ $(gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --filter="name~${_SHORT_SHA}" --format='value(state)' | wc -l) == 6 ]]; do
        echo -e "Stage states..."
        gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='table(name,state)'
        sleep 5
      done
      gcloud --project=${_PROJECT_ID} deploy releases promote --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --to-target=p1a
# Auto Approve to p1a
- name: gcr.io/cloud-builders/gcloud
  id: '09-deploy-g-approve-p1a'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      [[ "${_AUTO_APPROVE_TO_PROD}" == "false" ]] && exit 0
      until [[ $(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}") ]]; do
        sleep 3
      done
      gcloud --project=${_PROJECT_ID} deploy rollouts approve rel-${_SHORT_SHA}-to-p1a-0001 --release=rel-${_SHORT_SHA} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION}
# Auto Promote to p1b
- name: gcr.io/cloud-builders/gcloud
  id: '10-deploy-g-promote-p1b'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      [[ "${_AUTO_APPROVE_TO_PROD}" == "false" ]] && exit 0
      until [[ $(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}") ]]; do
        sleep 3
      done
      export RELEASE_NAME=$(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}")
      until [[ $(gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --filter="name~${_SHORT_SHA}" --format='value(state)' | wc -l) == 7 ]]; do
        echo -e "Stage states..."
        gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='table(name,state)'
        sleep 5
      done
      gcloud --project=${_PROJECT_ID} deploy releases promote --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --to-target=p1b
# Auto Promote to p1c
- name: gcr.io/cloud-builders/gcloud
  id: '11-deploy-g-promote-p1c'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      [[ "${_AUTO_APPROVE_TO_PROD}" == "false" ]] && exit 0
      until [[ $(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}") ]]; do
        sleep 3
      done
      export RELEASE_NAME=$(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}")
      until [[ $(gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --filter="name~${_SHORT_SHA}" --format='value(state)' | wc -l) == 8 ]]; do
        echo -e "Stage states..."
        gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='table(name,state)'
        sleep 5
      done
      gcloud --project=${_PROJECT_ID} deploy releases promote --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --to-target=p1c
# Auto Promote to p2a
- name: gcr.io/cloud-builders/gcloud
  id: '12-deploy-g-promote-p2a'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      [[ "${_AUTO_APPROVE_TO_PROD}" == "false" ]] && exit 0
      until [[ $(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}") ]]; do
        sleep 3
      done
      export RELEASE_NAME=$(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}")
      until [[ $(gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --filter="name~${_SHORT_SHA}" --format='value(state)' | wc -l) == 9 ]]; do
        echo -e "Stage states..."
        gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='table(name,state)'
        sleep 5
      done
      gcloud --project=${_PROJECT_ID} deploy releases promote --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --to-target=p2a
# Auto Promote to p2b
- name: gcr.io/cloud-builders/gcloud
  id: '13-deploy-g-promote-p2b'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      [[ "${_AUTO_APPROVE_TO_PROD}" == "false" ]] && exit 0
      until [[ $(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}") ]]; do
        sleep 3
      done
      export RELEASE_NAME=$(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}")
      until [[ $(gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --filter="name~${_SHORT_SHA}" --format='value(state)' | wc -l) == 10 ]]; do
        echo -e "Stage states..."
        gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='table(name,state)'
        sleep 5
      done
      gcloud --project=${_PROJECT_ID} deploy releases promote --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --to-target=p2b
# Auto Promote to p2c
- name: gcr.io/cloud-builders/gcloud
  id: '14-deploy-g-promote-p2c'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      [[ "${_AUTO_APPROVE_TO_PROD}" == "false" ]] && exit 0
      until [[ $(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}") ]]; do
        sleep 3
      done
      export RELEASE_NAME=$(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}")
      until [[ $(gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --filter="name~${_SHORT_SHA}" --format='value(state)' | wc -l) == 11 ]]; do
        echo -e "Stage states..."
        gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='table(name,state)'
        sleep 5
      done
      gcloud --project=${_PROJECT_ID} deploy releases promote --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --to-target=p2c
# Confirm pipeline success
- name: gcr.io/cloud-builders/gcloud
  id: '15-deploy-g-confirm-release-success'
  entrypoint: bash
  args: 
    - -c
    - |
      [[ "${_DEPLOY_G}" == "false" ]] && exit 0
      [[ "${_AUTO_APPROVE_TO_PROD}" == "false" ]] && exit 0
      until [[ $(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}") ]]; do
        sleep 3
      done
      export RELEASE_NAME=$(gcloud --project=${_PROJECT_ID} deploy releases list --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='value(name)' --filter="name~${_SHORT_SHA}")
      until [[ $(gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --filter="name~${_SHORT_SHA}" --format='value(state)' | wc -l) == 12 ]]; do
        echo -e "Stage states..."
        gcloud --project=${_PROJECT_ID} deploy rollouts list --release=$${RELEASE_NAME} --delivery-pipeline=${_ARTIFACT_REGISTRY}-${_SERVICE}-g-pipeline --region=${_PIPELINE_LOCATION} --format='table(name,state)'
        sleep 5
      done
      echo -e "The release has been successfully rolled out."
