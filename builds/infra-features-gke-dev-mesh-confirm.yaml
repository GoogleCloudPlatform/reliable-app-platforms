# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 7200s # 2hr
tags:
  - infra-features-gke-dev-mesh-confirm
substitutions:
  _PROJECT_ID: ${PROJECT_ID}
steps:
# Confirm ASM installation on GKE Dev
# Docs:
# 1. Configure managed Anthos Service Mesh with fleet API -> https://cloud.google.com/service-mesh/docs/managed/auto-control-plane-with-fleet
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-features-gke-dev-mesh-confirm"
  entrypoint: bash
  dir: "infra"
  args:
    - -c
    - |
      source vars.sh
      export PROJECT_NUMBER=$(gcloud projects describe ${_PROJECT_ID} --format 'value(projectNumber)')
      export DEV1_MEMBERSHIP="projects/$${PROJECT_NUMBER}/locations/$${GKE_DEV_REGION_1}/memberships/$${GKE_DEV1_NAME}"
      export DEV2_MEMBERSHIP="projects/$${PROJECT_NUMBER}/locations/$${GKE_DEV_REGION_1}/memberships/$${GKE_DEV2_NAME}"
      export DEV3_MEMBERSHIP="projects/$${PROJECT_NUMBER}/locations/$${GKE_DEV_REGION_1}/memberships/$${GKE_DEV3_NAME}"
      export DEV4_MEMBERSHIP="projects/$${PROJECT_NUMBER}/locations/$${GKE_DEV_REGION_2}/memberships/$${GKE_DEV4_NAME}"
      export DEV5_MEMBERSHIP="projects/$${PROJECT_NUMBER}/locations/$${GKE_DEV_REGION_2}/memberships/$${GKE_DEV5_NAME}"
      export DEV6_MEMBERSHIP="projects/$${PROJECT_NUMBER}/locations/$${GKE_DEV_REGION_2}/memberships/$${GKE_DEV6_NAME}"
      export DEV1_MEMBERSHIP_ACTIVE=NOT_ACTIVE
      until [[ $$DEV1_MEMBERSHIP_ACTIVE == "ACTIVE" ]]
      do
          export DEV1_MEMBERSHIP_ACTIVE=$(gcloud container fleet mesh describe --project ${_PROJECT_ID} --format "value(membershipStates[$${DEV1_MEMBERSHIP}].servicemesh.controlPlaneManagement.state)")
          sleep 5
          echo -e "DEV1_MEMBERSHIP_ACTIVE is $$DEV1_MEMBERSHIP_ACTIVE"
      done
      export DEV2_MEMBERSHIP_ACTIVE=NOT_ACTIVE
      until [[ $$DEV2_MEMBERSHIP_ACTIVE == "ACTIVE" ]]
      do
          export DEV2_MEMBERSHIP_ACTIVE=$(gcloud container fleet mesh describe --project ${_PROJECT_ID} --format "value(membershipStates[$${DEV2_MEMBERSHIP}].servicemesh.controlPlaneManagement.state)")
          sleep 5
          echo -e "DEV2_MEMBERSHIP_ACTIVE is $$DEV2_MEMBERSHIP_ACTIVE"
      done
      export DEV3_MEMBERSHIP_ACTIVE=NOT_ACTIVE
      until [[ $$DEV3_MEMBERSHIP_ACTIVE == "ACTIVE" ]]
      do
          export DEV3_MEMBERSHIP_ACTIVE=$(gcloud container fleet mesh describe --project ${_PROJECT_ID} --format "value(membershipStates[$${DEV3_MEMBERSHIP}].servicemesh.controlPlaneManagement.state)")
          sleep 5
          echo -e "DEV3_MEMBERSHIP_ACTIVE is $$DEV3_MEMBERSHIP_ACTIVE"
      done
      export DEV4_MEMBERSHIP_ACTIVE=NOT_ACTIVE
      until [[ $$DEV4_MEMBERSHIP_ACTIVE == "ACTIVE" ]]
      do
          export DEV4_MEMBERSHIP_ACTIVE=$(gcloud container fleet mesh describe --project ${_PROJECT_ID} --format "value(membershipStates[$${DEV4_MEMBERSHIP}].servicemesh.controlPlaneManagement.state)")
          sleep 5
          echo -e "DEV4_MEMBERSHIP_ACTIVE is $$DEV4_MEMBERSHIP_ACTIVE"
      done
      export DEV5_MEMBERSHIP_ACTIVE=NOT_ACTIVE
      until [[ $$DEV5_MEMBERSHIP_ACTIVE == "ACTIVE" ]]
      do
          export DEV5_MEMBERSHIP_ACTIVE=$(gcloud container fleet mesh describe --project ${_PROJECT_ID} --format "value(membershipStates[$${DEV5_MEMBERSHIP}].servicemesh.controlPlaneManagement.state)")
          sleep 5
          echo -e "DEV5_MEMBERSHIP_ACTIVE is $$DEV5_MEMBERSHIP_ACTIVE"
      done
      export DEV6_MEMBERSHIP_ACTIVE=NOT_ACTIVE
      until [[ $$DEV6_MEMBERSHIP_ACTIVE == "ACTIVE" ]]
      do
          export DEV6_MEMBERSHIP_ACTIVE=$(gcloud container fleet mesh describe --project ${_PROJECT_ID} --format "value(membershipStates[$${DEV6_MEMBERSHIP}].servicemesh.controlPlaneManagement.state)")
          sleep 5
          echo -e "DEV6_MEMBERSHIP_ACTIVE is $$DEV6_MEMBERSHIP_ACTIVE"
      done
# Confirm MCP installation on GKE Dev
# Docs:
# 1. Configure managed Anthos Service Mesh with fleet API -> https://cloud.google.com/service-mesh/docs/managed/auto-control-plane-with-fleet
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-features-gke-dev-mesh-cpr-confirm"
  entrypoint: bash
  dir: "infra"
  args:
    - -c
    - |
      source vars.sh
      while [[ $(gcloud container clusters list --project ${_PROJECT_ID} --filter "STATUS=RUNNING AND resourceLabels.env:dev" --format="value(name)"| wc -l | awk '{print $1}') != "6" ]]; do
        echo "Waiting for all dev the cluster to be RUNNING."
        sleep 5
      done
      gcloud container clusters get-credentials $${GKE_DEV1_NAME} --zone $${GKE_DEV1_LOCATION} --project ${_PROJECT_ID}
      gcloud container clusters get-credentials $${GKE_DEV2_NAME} --zone $${GKE_DEV2_LOCATION} --project ${_PROJECT_ID}
      gcloud container clusters get-credentials $${GKE_DEV3_NAME} --zone $${GKE_DEV3_LOCATION} --project ${_PROJECT_ID}
      gcloud container clusters get-credentials $${GKE_DEV4_NAME} --zone $${GKE_DEV4_LOCATION} --project ${_PROJECT_ID}
      gcloud container clusters get-credentials $${GKE_DEV5_NAME} --zone $${GKE_DEV5_LOCATION} --project ${_PROJECT_ID}
      gcloud container clusters get-credentials $${GKE_DEV6_NAME} --zone $${GKE_DEV6_LOCATION} --project ${_PROJECT_ID}
      kubectl --context=gke_${_PROJECT_ID}_$${GKE_DEV1_LOCATION}_$${GKE_DEV1_NAME} wait --for=condition=ProvisioningFinished controlplanerevision asm-managed -n istio-system --timeout 15m
      kubectl --context=gke_${_PROJECT_ID}_$${GKE_DEV2_LOCATION}_$${GKE_DEV2_NAME} wait --for=condition=ProvisioningFinished controlplanerevision asm-managed -n istio-system --timeout 15m
      kubectl --context=gke_${_PROJECT_ID}_$${GKE_DEV3_LOCATION}_$${GKE_DEV3_NAME} wait --for=condition=ProvisioningFinished controlplanerevision asm-managed -n istio-system --timeout 15m
      kubectl --context=gke_${_PROJECT_ID}_$${GKE_DEV4_LOCATION}_$${GKE_DEV4_NAME} wait --for=condition=ProvisioningFinished controlplanerevision asm-managed -n istio-system --timeout 15m
      kubectl --context=gke_${_PROJECT_ID}_$${GKE_DEV5_LOCATION}_$${GKE_DEV5_NAME} wait --for=condition=ProvisioningFinished controlplanerevision asm-managed -n istio-system --timeout 15m
      kubectl --context=gke_${_PROJECT_ID}_$${GKE_DEV6_LOCATION}_$${GKE_DEV6_NAME} wait --for=condition=ProvisioningFinished controlplanerevision asm-managed -n istio-system --timeout 15m