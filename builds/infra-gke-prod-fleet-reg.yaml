# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 7200s # 2hr
tags:
  - infra-gke-prod-fleet-reg
substitutions:
  _PROJECT_ID: ${PROJECT_ID}
steps:
# Register GKE prod1 cluster to Fleet
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-gke-prod1-fleet-reg"
  dir: "infra"
  entrypoint: bash
  args:
    - -c
    - |
      source vars.sh
      export PROD1_REGISTERED=$(gcloud --project=${_PROJECT_ID} container fleet memberships list --filter="name:$${GKE_PROD1_NAME}")
      echo -e "PROD1_REGISTERED is $$PROD1_REGISTERED"
      if [[ ! $${PROD1_REGISTERED} ]]; then
        while [[ $(gcloud container clusters describe $${GKE_PROD1_NAME} --zone $${GKE_PROD1_LOCATION} --project ${_PROJECT_ID} --format="value(status)") != "RUNNING" ]]; do
          echo "Waiting for $${GKE_PROD1_NAME} cluster to be RUNNING."
          sleep 5
        done
        gcloud container fleet memberships register $${GKE_PROD1_NAME} \
          --gke-cluster $${GKE_PROD1_LOCATION}/$${GKE_PROD1_NAME} \
          --enable-workload-identity \
          --project=${_PROJECT_ID}
      fi
# Register GKE prod2 cluster to Fleet
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-gke-prod2-fleet-reg"
  dir: "infra"
  entrypoint: bash
  args:
    - -c
    - |
      source vars.sh
      export PROD2_REGISTERED=$(gcloud --project=${_PROJECT_ID} container fleet memberships list --filter="name:$${GKE_PROD2_NAME}")
      echo -e "PROD2_REGISTERED is $$PROD2_REGISTERED"
      if [[ ! $${PROD2_REGISTERED} ]]; then
        while [[ $(gcloud container clusters describe $${GKE_PROD2_NAME} --zone $${GKE_PROD2_LOCATION} --project ${_PROJECT_ID} --format="value(status)") != "RUNNING" ]]; do
          echo "Waiting for $${GKE_PROD2_NAME} cluster to be RUNNING."
          sleep 5
        done
        gcloud container fleet memberships register $${GKE_PROD2_NAME} \
          --gke-cluster $${GKE_PROD2_LOCATION}/$${GKE_PROD2_NAME} \
          --enable-workload-identity \
          --project=${_PROJECT_ID}
      fi
# Register GKE prod3 cluster to Fleet
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-gke-prod3-fleet-reg"
  dir: "infra"
  entrypoint: bash
  args:
    - -c
    - |
      source vars.sh
      export PROD3_REGISTERED=$(gcloud --project=${_PROJECT_ID} container fleet memberships list --filter="name:$${GKE_PROD3_NAME}")
      echo -e "PROD3_REGISTERED is $$PROD3_REGISTERED"
      if [[ ! $${PROD3_REGISTERED} ]]; then
        while [[ $(gcloud container clusters describe $${GKE_PROD3_NAME} --zone $${GKE_PROD3_LOCATION} --project ${_PROJECT_ID} --format="value(status)") != "RUNNING" ]]; do
          echo "Waiting for $${GKE_PROD3_NAME} cluster to be RUNNING."
          sleep 5
        done
        gcloud container fleet memberships register $${GKE_PROD3_NAME} \
          --gke-cluster $${GKE_PROD3_LOCATION}/$${GKE_PROD3_NAME} \
          --enable-workload-identity \
          --project=${_PROJECT_ID}
      fi
# Register GKE prod4 cluster to Fleet
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-gke-prod4-fleet-reg"
  dir: "infra"
  entrypoint: bash
  args:
    - -c
    - |
      source vars.sh
      export PROD4_REGISTERED=$(gcloud --project=${_PROJECT_ID} container fleet memberships list --filter="name:$${GKE_PROD4_NAME}")
      echo -e "PROD4_REGISTERED is $$PROD4_REGISTERED"
      if [[ ! $${PROD4_REGISTERED} ]]; then
        while [[ $(gcloud container clusters describe $${GKE_PROD4_NAME} --zone $${GKE_PROD4_LOCATION} --project ${_PROJECT_ID} --format="value(status)") != "RUNNING" ]]; do
          echo "Waiting for $${GKE_PROD4_NAME} cluster to be RUNNING."
          sleep 5
        done
        gcloud container fleet memberships register $${GKE_PROD4_NAME} \
          --gke-cluster $${GKE_PROD4_LOCATION}/$${GKE_PROD4_NAME} \
          --enable-workload-identity \
          --project=${_PROJECT_ID}
      fi
# Register GKE prod5 cluster to Fleet
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-gke-prod5-fleet-reg"
  dir: "infra"
  entrypoint: bash
  args:
    - -c
    - |
      source vars.sh
      export PROD5_REGISTERED=$(gcloud --project=${_PROJECT_ID} container fleet memberships list --filter="name:$${GKE_PROD5_NAME}")
      echo -e "PROD5_REGISTERED is $$PROD5_REGISTERED"
      if [[ ! $${PROD5_REGISTERED} ]]; then
        while [[ $(gcloud container clusters describe $${GKE_PROD5_NAME} --zone $${GKE_PROD5_LOCATION} --project ${_PROJECT_ID} --format="value(status)") != "RUNNING" ]]; do
          echo "Waiting for $${GKE_PROD5_NAME} cluster to be RUNNING."
          sleep 5
        done
        gcloud container fleet memberships register $${GKE_PROD5_NAME} \
          --gke-cluster $${GKE_PROD5_LOCATION}/$${GKE_PROD5_NAME} \
          --enable-workload-identity \
          --project=${_PROJECT_ID}
      fi
# Register GKE prod6 cluster to Fleet
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-gke-prod6-fleet-reg"
  dir: "infra"
  entrypoint: bash
  args:
    - -c
    - |
      source vars.sh
      export PROD6_REGISTERED=$(gcloud --project=${_PROJECT_ID} container fleet memberships list --filter="name:$${GKE_PROD6_NAME}")
      echo -e "PROD6_REGISTERED is $$PROD6_REGISTERED"
      if [[ ! $${PROD6_REGISTERED} ]]; then
        while [[ $(gcloud container clusters describe $${GKE_PROD6_NAME} --zone $${GKE_PROD6_LOCATION} --project ${_PROJECT_ID} --format="value(status)") != "RUNNING" ]]; do
          echo "Waiting for $${GKE_PROD6_NAME} cluster to be RUNNING."
          sleep 5
        done
        gcloud container fleet memberships register $${GKE_PROD6_NAME} \
          --gke-cluster $${GKE_PROD6_LOCATION}/$${GKE_PROD6_NAME} \
          --enable-workload-identity \
          --project=${_PROJECT_ID}
      fi
      
