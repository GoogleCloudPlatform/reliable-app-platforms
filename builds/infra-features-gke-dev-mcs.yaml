# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 7200s # 2hr
tags:
  - infra-features-gke-dev-mcs
substitutions:
  _PROJECT_ID: ${PROJECT_ID}
steps:
# Enable MCS
# Docs:
# 1. Enabling multi-cluster Gateways -> https://cloud.google.com/kubernetes-engine/docs/how-to/enabling-multi-cluster-gateways
- name: "gcr.io/cloud-builders/gcloud"
  id: "infra-features-gke-dev-mcs"
  dir: "infra"
  entrypoint: bash
  args:
    - -c
    - |
      source vars.sh
      while [[ $(gcloud container clusters describe $${GKE_CONFIG_NAME} --zone $${GKE_CONFIG_LOCATION} --project ${_PROJECT_ID} --format="value(status)") != "RUNNING" ]]; do sleep 5; done
      gcloud container clusters get-credentials $${GKE_CONFIG_NAME} --zone $${GKE_CONFIG_LOCATION} --project ${_PROJECT_ID}
      export MCG_GATEWAYS=$(kubectl get crd | grep gatewayclasses && kubectl get gatewayclass | grep gke-l7-gxlb-mc)
      if [[ ! "$${MCG_GATEWAYS}" ]]; then
        gcloud container fleet ingress disable --project=${_PROJECT_ID}
      fi
      export PROJECT_NUMBER=$(gcloud projects describe ${_PROJECT_ID} --format 'value(projectNumber)')
      export DEV1_MEMBERSHIP="projects/$${PROJECT_NUMBER}/locations/global/memberships/$${GKE_DEV1_NAME}"
      export DEV2_MEMBERSHIP="projects/$${PROJECT_NUMBER}/locations/global/memberships/$${GKE_DEV2_NAME}"
      export DEV3_MEMBERSHIP="projects/$${PROJECT_NUMBER}/locations/global/memberships/$${GKE_DEV3_NAME}"
      export DEV4_MEMBERSHIP="projects/$${PROJECT_NUMBER}/locations/global/memberships/$${GKE_DEV4_NAME}"
      export DEV5_MEMBERSHIP="projects/$${PROJECT_NUMBER}/locations/global/memberships/$${GKE_DEV5_NAME}"
      export DEV6_MEMBERSHIP="projects/$${PROJECT_NUMBER}/locations/global/memberships/$${GKE_DEV6_NAME}"
      export DEV1_MEMBERSHIP_OK=NOT_OK
      until [[ $$DEV1_MEMBERSHIP_OK == "OK" ]]
      do
          export DEV1_MEMBERSHIP_OK=$(gcloud container fleet multi-cluster-services describe --project ${_PROJECT_ID} --format "value(membershipStates[$${DEV1_MEMBERSHIP}].state.code)")
          sleep 5
          echo -e "DEV1_MEMBERSHIP_OK is $$DEV1_MEMBERSHIP_OK"
      done
      export DEV2_MEMBERSHIP_OK=NOT_OK
      until [[ $$DEV2_MEMBERSHIP_OK == "OK" ]]
      do
          export DEV2_MEMBERSHIP_OK=$(gcloud container fleet multi-cluster-services describe --project ${_PROJECT_ID} --format "value(membershipStates[$${DEV2_MEMBERSHIP}].state.code)")
          sleep 5
          echo -e "DEV2_MEMBERSHIP_OK is $$DEV2_MEMBERSHIP_OK"
      done
      export DEV3_MEMBERSHIP_OK=NOT_OK
      until [[ $$DEV3_MEMBERSHIP_OK == "OK" ]]
      do
          export DEV3_MEMBERSHIP_OK=$(gcloud container fleet multi-cluster-services describe --project ${_PROJECT_ID} --format "value(membershipStates[$${DEV3_MEMBERSHIP}].state.code)")
          sleep 5
          echo -e "DEV3_MEMBERSHIP_OK is $$DEV3_MEMBERSHIP_OK"
      done
      export DEV4_MEMBERSHIP_OK=NOT_OK
      until [[ $$DEV4_MEMBERSHIP_OK == "OK" ]]
      do
          export DEV4_MEMBERSHIP_OK=$(gcloud container fleet multi-cluster-services describe --project ${_PROJECT_ID} --format "value(membershipStates[$${DEV4_MEMBERSHIP}].state.code)")
          sleep 5
          echo -e "DEV4_MEMBERSHIP_OK is $$DEV4_MEMBERSHIP_OK"
      done
      export DEV5_MEMBERSHIP_OK=NOT_OK
      until [[ $$DEV5_MEMBERSHIP_OK == "OK" ]]
      do
          export DEV5_MEMBERSHIP_OK=$(gcloud container fleet multi-cluster-services describe --project ${_PROJECT_ID} --format "value(membershipStates[$${DEV5_MEMBERSHIP}].state.code)")
          sleep 5
          echo -e "DEV5_MEMBERSHIP_OK is $$DEV5_MEMBERSHIP_OK"
      done
      export DEV6_MEMBERSHIP_OK=NOT_OK
      until [[ $$DEV6_MEMBERSHIP_OK == "OK" ]]
      do
          export DEV6_MEMBERSHIP_OK=$(gcloud container fleet multi-cluster-services describe --project ${_PROJECT_ID} --format "value(membershipStates[$${DEV6_MEMBERSHIP}].state.code)")
          sleep 5
          echo -e "DEV6_MEMBERSHIP_OK is $$DEV6_MEMBERSHIP_OK"
      done
